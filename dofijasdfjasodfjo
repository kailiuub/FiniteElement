[1mdiff --git a/BarFMver1.py b/BarFMver1.py[m
[1mdeleted file mode 100755[m
[1mindex 8d0203d..0000000[m
[1m--- a/BarFMver1.py[m
[1m+++ /dev/null[m
[36m@@ -1,186 +0,0 @@[m
[31m-import sys[m
[31m-from PyQt5.QtWidgets import *[m
[31m-from PyQt5.QtCore import *[m
[31m-from PyQt5.QtGui import *[m
[31m-[m
[31m-from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas[m
[31m-import matplotlib.pyplot as plt[m
[31m-import numpy as np[m
[31m-import math[m
[31m-from scipy.linalg import eigh[m
[31m-[m
[31m-# **** Implement Algorithms ****[m
[31m-class FF (FigureCanvas):[m
[31m-    def __init__(self,parent=None,num_elems=10):[m
[31m-        self.fig=plt.figure(figsize=(8,3),dpi=80,facecolor='white')[m
[31m-        self.ax1=self.fig.add_subplot(121)[m
[31m-[m
[31m-        # We want the axes cleared every time plot() is called[m
[31m-        self.ax1.hold(False)[m
[31m-[m
[31m-        FigureCanvas.__init__(self,self.fig)[m
[31m-        self.setParent(parent)[m
[31m-[m
[31m-        self.nelem=num_elems[m
[31m-        # store M, K, freq, evecs[m
[31m-        self.result=[][m
[31m-        for self.counter in range(1,self.nelem+1):[m
[31m-             M, K, freq, evecs=self.compute()[m
[31m-             exact_freq=math.pi/2[m
[31m-             error=(freq[0]-exact_freq)/exact_freq *100[m
[31m-             self.result.append((self.counter,error,freq[0]))[m
[31m-[m
[31m-        self.elements = np.array([x[0] for x in self.result])[m
[31m-        self.err = np.array([x[1] for x in self.result])[m
[31m-        self.freq = np.array([x[2] for x in self.result])[m
[31m-[m
[31m-        # plot elements vs error[m
[31m-        self.ax1.plot(self.elements,self.err,linestyle='--',color='blue')[m
[31m-        plt.xlabel('number of elements')[m
[31m-        plt.ylabel('error (%)')[m
[31m-        # fit plot size to figure frame[m
[31m-        plt.tight_layout()[m
[31m-[m
[31m-        self.ax2=self.fig.add_subplot(122)[m
[31m-        self.ax2.plot(self.elements,self.freq,color='red')[m
[31m-        plt.xlabel('number elements')[m
[31m-        plt.ylabel('frequency (Hz)')[m
[31m-        plt.tight_layout()[m
[31m-[m
[31m-[m
[31m-    # compute M, K, freq, evecs[m
[31m-    def compute(self):[m
[31m-[m
[31m-        # element mass and stiffness matrices for a bar[m
[31m-        m = np.array([[2,1],[1,2]])/(6. * self.counter)        # define mass matrix[m
[31m-        k = np.array([[1,-1],[-1,1]])*float(self.counter)      # define stiffness matrix[m
[31m-[m
[31m-        # construct global mass and stiffness matrices[m
[31m-        M = np.zeros((self.counter+1,self.counter+1))[m
[31m-        K = np.zeros((self.counter+1,self.counter+1))[m
[31m-[m
[31m-        # assembly of elements[m
[31m-        for i in range(self.counter):[m
[31m-            M_temp = np.zeros((self.counter+1,self.counter+1))[m
[31m-            K_temp = np.zeros((self.counter+1,self.counter+1))[m
[31m-            M_temp [i:i+2,i:i+2]=m[m
[31m-            K_temp [i:i+2,i:i+2]=k[m
[31m-            M += M_temp[m
[31m-            K += K_temp[m
[31m-[m
[31m-        # reomove the fixed degree of freedom[m
[31m-        for i in range(2):[m
[31m-            M = np.delete(M, 0, axis=i)  #axis=0 row, 1 column[m
[31m-            K = np.delete(K, 0, axis=i)[m
[31m-[m
[31m-        # eigenvalue problem[m
[31m-        evals, evecs = eigh(K,M)[m
[31m-        freq = np.sqrt(evals)[m
[31m-        return M, K, freq, evecs[m
[31m-[m
[31m-class App(QMainWindow):[m
[31m-    def __init__(self):[m
[31m-        QMainWindow.__init__(self)[m
[31m-        self.setWindowTitle('Bar Element')[m
[31m-        self.setGeometry(50,50,500,500)[m
[31m-[m
[31m-        # **** Create 2 Tabs to show Schematic and Equations ****[m
[31m-        self.mainW1=QWidget(self)[m
[31m-        self.layout1=QVBoxLayout(self.mainW1)[m
[31m-        # initiate tabs[m
[31m-        self.tabs=QTabWidget()[m
[31m-        self.tab1=QWidget()[m
[31m-        self.tab2=QWidget()[m
[31m-        # add tab1 and tab2 to tabs[m
[31m-        self.tabs.addTab(self.tab1,'Schematic')[m
[31m-        self.tabs.addTab(self.tab2,'Equations')[m
[31m-        # create tab1[m
[31m-        self.tab1_layout=QVBoxLayout(self)[m
[31m-        self.pix1=QPixmap('BarSchematic.jpg')[m
[31m-        self.pix1r=self.pix1.scaledToHeight(180)            # rescale pixmap[m
[31m-        self.label1=QLabel(self)[m
[31m-        self.label1.setAlignment(Qt.AlignCenter)            # Center Alignment of Label[m
[31m-        self.label1.setPixmap(self.pix1r)[m
[31m-        self.tab1_layout.addWidget(self.label1)[m
[31m-        self.tab1.setLayout(self.tab1_layout)[m
[31m-        # create tab2[m
[31m-        self.tab2_layout=QVBoxLayout(self)[m
[31m-        self.pix2=QPixmap('Eq.jpg')[m
[31m-        self.pix2r=self.pix2.scaledToHeight(180)[m
[31m-        self.label2=QLabel(self)[m
[31m-        self.label2.setAlignment(Qt.AlignCenter)[m
[31m-        self.label2.setPixmap(self.pix2r)[m
[31m-        self.tab2_layout.addWidget(self.label2)[m
[31m-        self.tab2.setLayout(self.tab2_layout)[m
[31m-        # add tabs to layout1 and add layout1 to mainW1[m
[31m-        self.layout1.addWidget(self.tabs)[m
[31m-        self.mainW1.setLayout(self.layout1)[m
[31m-        # adjust size and position of mainW1[m
[31m-        self.mainW1.resize(260,240)[m
[31m-        self.mainW1.move(10,20)[m
[31m-[m
[31m-        # **** Create Menu ****[m
[31m-        self.menu=self.menuBar()[m
[31m-        self.file=self.menu.addMenu('File')[m
[31m-        self.edit=self.menu.addMenu('Edit')[m
[31m-        self.help=self.menu.addMenu('Help')[m
[31m-[m
[31m-        self.exit=QAction(QIcon(''),'Exit',self)[m
[31m-        self.exit.setShortcut('Ctrl+Q')[m
[31m-        self.exit.triggered.connect(self.close)[m
[31m-        self.file.addAction(self.exit)[m
[31m-[m
[31m-        self.exit=QAction(QIcon(''),'Save Table',self)[m
[31m-        self.exit.setShortcut('Ctrl+S')[m
[31m-        self.exit.triggered.connect(self.saveTable)[m
[31m-        self.file.addAction(self.exit)[m
[31m-[m
[31m-        self.about=QAction('About',self)[m
[31m-        self.about.setShortcut('Ctrl+T')[m
[31m-        self.about.triggered.connect(self.aboutact)[m
[31m-        self.help.addAction(self.about)[m
[31m-[m
[31m-        # **** Create Plot *****[m
[31m-        self.mainW2=QWidget(self)[m
[31m-        self.layout2=QVBoxLayout(self)[m
[31m-        self.fig=FF()[m
[31m-        self.layout2.addWidget(self.fig)[m
[31m-        self.mainW2.setLayout(self.layout2)[m
[31m-        self.mainW2.move(5,260)[m
[31m-        self.mainW2.resize(495,240)[m
[31m-[m
[31m-        # **** Create Table to show element no./ frequency / error *****[m
[31m-        #   self.mainW3=QWidget(self)[m
[31m-        self.mainW3=QWidget(self)[m
[31m-        self.createTable(5,3)[m
[31m-        self.layout3=QVBoxLayout(self)[m
[31m-        self.layout3.addWidget(self.table)[m
[31m-        self.mainW3.setLayout(self.layout3)[m
[31m-        self.mainW3.move(270,30)[m
[31m-        self.mainW3.resize(220,230)[m
[31m-[m
[31m-[m
[31m-    @pyqtSlot()[m
[31m-    def aboutact(self):[m
[31m-        resp=QMessageBox.question(self,'About','This APP is designed to set different number of finite elements to compute the vibration frequency of a bar element',QMessageBox.Ok)[m
[31m-[m
[31m-    @pyqtSlot()[m
[31m-    def saveTable(self):[m
[31m-        pass[m
[31m-[m
[31m-    def createTable(self,r,c):[m
[31m-        self.table=QTableWidget()[m
[31m-        self.table.setRowCount(r)[m
[31m-        self.table.setColumnCount(c)[m
[31m-        for i in range(r):[m
[31m-            for j in range(c):[m
[31m-                self.table.setItem(i, j, QTableWidgetItem(str('cell ({}, {})'.format(i,j))))[m
[31m-                print(str('cell ({}, {})'.format(i,j)))[m
[31m-[m
[31m-[m
[31m-qApp = QApplication(sys.argv)[m
[31m-aw = App()[m
[31m-aw.show()[m
[31m-sys.exit(qApp.exec_())[m
[31m-[m
[31m-[m
[1mdiff --git a/BarFMver2.py b/BarFMver2.py[m
[1mdeleted file mode 100755[m
[1mindex 53ad909..0000000[m
[1m--- a/BarFMver2.py[m
[1m+++ /dev/null[m
[36m@@ -1,187 +0,0 @@[m
[31m-import sys[m
[31m-from PyQt5.QtWidgets import *[m
[31m-from PyQt5.QtCore import *[m
[31m-from PyQt5.QtGui import *[m
[31m-[m
[31m-from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas[m
[31m-import matplotlib.pyplot as plt[m
[31m-import numpy as np[m
[31m-import math[m
[31m-from scipy.linalg import eigh[m
[31m-[m
[31m-# **** Implement Algorithms ****[m
[31m-class FF (FigureCanvas):[m
[31m-    def __init__(self,parent=None,num_elems=10):[m
[31m-        self.fig=plt.figure(figsize=(8,3),dpi=80,facecolor='white')[m
[31m-        self.ax1=self.fig.add_subplot(121)[m
[31m-[m
[31m-        # We want the axes cleared every time plot() is called[m
[31m-        self.ax1.hold(False)[m
[31m-[m
[31m-        FigureCanvas.__init__(self,self.fig)[m
[31m-        self.setParent(parent)[m
[31m-[m
[31m-        self.nelem=num_elems[m
[31m-        # store M, K, freq, evecs[m
[31m-        self.result=[][m
[31m-        for self.counter in range(1,self.nelem+1):[m
[31m-             M, K, freq, evecs=self.compute()[m
[31m-             exact_freq=math.pi/2[m
[31m-             error=(freq[0]-exact_freq)/exact_freq *100[m
[31m-             self.result.append((self.counter,error,freq[0]))[m
[31m-[m
[31m-        self.elements = np.array([x[0] for x in self.result])[m
[31m-        self.err = np.array([x[1] for x in self.result])[m
[31m-        self.freq = np.array([x[2] for x in self.result])[m
[31m-	[m
[31m-[m
[31m-        # plot elements vs error[m
[31m-        self.ax1.plot(self.elements,self.err,linestyle='--',color='blue')[m
[31m-        plt.xlabel('number of elements')[m
[31m-        plt.ylabel('error (%)')[m
[31m-        # fit plot size to figure frame[m
[31m-        plt.tight_layout()[m
[31m-[m
[31m-        self.ax2=self.fig.add_subplot(122)[m
[31m-        self.ax2.plot(self.elements,self.freq,color='red')[m
[31m-        plt.xlabel('number elements')[m
[31m-        plt.ylabel('frequency (Hz)')[m
[31m-        plt.tight_layout()[m
[31m-[m
[31m-[m
[31m-    # compute M, K, freq, evecs[m
[31m-    def compute(self):[m
[31m-[m
[31m-        # element mass and stiffness matrices for a bar[m
[31m-        m = np.array([[2,1],[1,2]])/(6. * self.counter)        # define mass matrix[m
[31m-        k = np.array([[1,-1],[-1,1]])*float(self.counter)      # define stiffness matrix[m
[31m-[m
[31m-        # construct global mass and stiffness matrices[m
[31m-        M = np.zeros((self.counter+1,self.counter+1))[m
[31m-        K = np.zeros((self.counter+1,self.counter+1))[m
[31m-[m
[31m-        # assembly of elements[m
[31m-        for i in range(self.counter):[m
[31m-            M_temp = np.zeros((self.counter+1,self.counter+1))[m
[31m-            K_temp = np.zeros((self.counter+1,self.counter+1))[m
[31m-            M_temp [i:i+2,i:i+2]=m[m
[31m-            K_temp [i:i+2,i:i+2]=k[m
[31m-            M += M_temp[m
[31m-            K += K_temp[m
[31m-[m
[31m-        # reomove the fixed degree of freedom[m
[31m-        for i in range(2):[m
[31m-            M = np.delete(M, 0, axis=i)  #axis=0 row, 1 column[m
[31m-            K = np.delete(K, 0, axis=i)[m
[31m-[m
[31m-        # eigenvalue problem[m
[31m-        evals, evecs = eigh(K,M)[m
[31m-        freq = np.sqrt(evals)[m
[31m-        return M, K, freq, evecs[m
[31m-[m
[31m-class App(QMainWindow):[m
[31m-    def __init__(self):[m
[31m-        QMainWindow.__init__(self)[m
[31m-        self.setWindowTitle('Bar Element')[m
[31m-        self.setGeometry(50,50,500,500)[m
[31m-[m
[31m-        # **** Create 2 Tabs to show Schematic and Equations ****[m
[31m-        self.mainW1=QWidget(self)[m
[31m-        self.layout1=QVBoxLayout(self.mainW1)[m
[31m-        # initiate tabs[m
[31m-        self.tabs=QTabWidget()[m
[31m-        self.tab1=QWidget()[m
[31m-        self.tab2=QWidget()[m
[31m-        # add tab1 and tab2 to tabs[m
[31m-        self.tabs.addTab(self.tab1,'Schematic')[m
[31m-        self.tabs.addTab(self.tab2,'Equations')[m
[31m-        # create tab1[m
[31m-        self.tab1_layout=QVBoxLayout(self)[m
[31m-        self.pix1=QPixmap('BarSchematic.jpg')[m
[31m-        self.pix1r=self.pix1.scaledToHeight(180)            # rescale pixmap[m
[31m-        self.label1=QLabel(self)[m
[31m-        self.label1.setAlignment(Qt.AlignCenter)            # Center Alignment of Label[m
[31m-        self.label1.setPixmap(self.pix1r)[m
[31m-        self.tab1_layout.addWidget(self.label1)[m
[31m-        self.tab1.setLayout(self.tab1_layout)[m
[31m-        # create tab2[m
[31m-        self.tab2_layout=QVBoxLayout(self)[m
[31m-        self.pix2=QPixmap('Eq.jpg')[m
[31m-        self.pix2r=self.pix2.scaledToHeight(180)[m
[31m-        self.label2=QLabel(self)[m
[31m-        self.label2.setAlignment(Qt.AlignCenter)[m
[31m-        self.label2.setPixmap(self.pix2r)[m
[31m-        self.tab2_layout.addWidget(self.label2)[m
[31m-        self.tab2.setLayout(self.tab2_layout)[m
[31m-        # add tabs to layout1 and add layout1 to mainW1[m
[31m-        self.layout1.addWidget(self.tabs)[m
[31m-        self.mainW1.setLayout(self.layout1)[m
[31m-        # adjust size and position of mainW1[m
[31m-        self.mainW1.resize(260,240)[m
[31m-        self.mainW1.move(10,20)[m
[31m-[m
[31m-        # **** Create Menu ****[m
[31m-        self.menu=self.menuBar()[m
[31m-        self.file=self.menu.addMenu('File')[m
[31m-        self.edit=self.menu.addMenu('Edit')[m
[31m-        self.help=self.menu.addMenu('Help')[m
[31m-[m
[31m-        self.exit=QAction(QIcon(''),'Exit',self)[m
[31m-        self.exit.setShortcut('Ctrl+Q')[m
[31m-        self.exit.triggered.connect(self.close)[m
[31m-        self.file.addAction(self.exit)[m
[31m-[m
[31m-        self.exit=QAction(QIcon(''),'Save Table',self)[m
[31m-        self.exit.setShortcut('Ctrl+S')[m
[31m-        self.exit.triggered.connect(self.saveTable)[m
[31m-        self.file.addAction(self.exit)[m
[31m-[m
[31m-        self.about=QAction('About',self)[m
[31m-        self.about.setShortcut('Ctrl+T')[m
[31m-        self.about.triggered.connect(self.aboutact)[m
[31m-        self.help.addAction(self.about)[m
[31m-[m
[31m-        # **** Create Plot *****[m
[31m-        self.mainW2=QWidget(self)[m
[31m-        self.layout2=QVBoxLayout(self)[m
[31m-        self.fig=FF()[m
[31m-        self.layout2.addWidget(self.fig)[m
[31m-        self.mainW2.setLayout(self.layout2)[m
[31m-        self.mainW2.move(5,260)[m
[31m-        self.mainW2.resize(495,240)[m
[31m-[m
[31m-        # **** Create Table to show element no./ frequency / error *****[m
[31m-        #   self.mainW3=QWidget(self)[m
[31m-        self.mainW3=QWidget(self)[m
[31m-        self.createTable(5,3)[m
[31m-        self.layout3=QVBoxLayout(self)[m
[31m-        self.layout3.addWidget(self.table)[m
[31m-        self.mainW3.setLayout(self.layout3)[m
[31m-        self.mainW3.move(270,30)[m
[31m-        self.mainW3.resize(220,230)[m
[31m-[m
[31m-[m
[31m-    @pyqtSlot()[m
[31m-    def aboutact(self):[m
[31m-        resp=QMessageBox.question(self,'About','This APP is designed to set different number of finite elements to compute the vibration frequency of a bar element',QMessageBox.Ok)[m
[31m-[m
[31m-    @pyqtSlot()[m
[31m-    def saveTable(self):[m
[31m-        pass[m
[31m-[m
[31m-    def createTable(self,r,c):[m
[31m-    